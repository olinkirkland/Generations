<?xml version="1.0"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009"
               xmlns:s="library://ns.adobe.com/flex/spark"
               xmlns:g="game.*"
               creationComplete="onCreationComplete(event)"
               frameRate="60"
               width="900"
               height="600">

    <fx:Style source="/assets/css/global.css"/>

    <fx:Script><![CDATA[
        import events.GameEvent;
        import events.PopupEvent;

        import global.Color;
        import global.Icons;
        import global.Net;

        import logic.Console;
        import logic.GameData;
        import logic.PopupManager;
        import logic.Signal;

        import mx.events.FlexEvent;

        import playerio.*;

        import spark.events.ElementExistenceEvent;

        import ui.LogType;

        import ui.popups.ConfirmPopup;

        import ui.popups.ConsolePopup;
        import ui.popups.InfoPopup;
        import ui.popups.InputPopup;
        import ui.popups.Popup;

        private function onCreationComplete(event:FlexEvent):void
        {
            addEventListeners();
        }

        private function addEventListeners():void
        {
            Signal.instance.addEventListener(PopupEvent.OPEN, function (event:PopupEvent):void
            {
                openPopup(event.popup);
            });

            Signal.instance.addEventListener(PopupEvent.CLOSE, function (event:PopupEvent):void
            {
                closePopup();
            });

            startMultiplayer();
        }

        private function startMultiplayer():void
        {
            var serverId:String = "generations-lrcaoga3v0fyoyea42pza";
            PlayerIO.connect(stage, serverId, "public", "GuestUser", "", null, handleConnect, handleError);
        }

        // Called on successful connection
        private function handleConnect(client:Client):void
        {
            Console.instance.log("Connected to server");
            Net.client = client;

            openConnectionTypePopup();
        }

        private function joinRoom():void
        {
            GameData.instance.reset();

            buttonToggleConnection.enabled = false;
            buttonToggleConnection.label = "Connecting...";
            Net.client.multiplayer.createJoinRoom("myRoom", "Game", true, {}, {}, handleJoin, handleError);
        }

        private function handleJoin(connection:Connection):void
        {
            Net.connection = connection;
            Net.connection.addMessageHandler("*", handleMessages);
            Net.connection.addDisconnectHandler(handleDisconnect);

            buttonToggleConnection.enabled = true;
            buttonToggleConnection.label = "Disconnect";
        }

        private function handleDisconnect(showReconnectPopup:Boolean = true):void
        {
            if (Net.connection)
                Net.connection.removeMessageHandler("*", handleMessages);
            buttonToggleConnection.label = "Connect";
            buttonToggleConnection.enabled = true;

            GameData.instance.reset();

            Signal.instance.dispatchEvent(new GameEvent(GameEvent.GAME_STATE_UPDATE));

            if (showReconnectPopup)
            {
                var p:ConfirmPopup = new ConfirmPopup();
                p.header = "Disconnected!";
                p.description = "You disconnected. Reconnect?";
                p.textConfirm = "Reconnect";
                p.callbackConfirm = joinRoom;
                PopupManager.open(p);
            }
        }

        private function handleMessages(m:Message):void
        {
            switch (m.type)
            {
                case "UserJoined":
                    // A user joined
                    GameData.instance.addPlayer(m.getInt(0), m.getString(1));
                    break;
                case "UserLeft":
                    // A user left
                    GameData.instance.removePlayer(m.getInt(0));
                    break;
                case "Identify":
                    // Server provides you your id and name
                    GameData.instance.myId = m.getInt(0);
                    GameData.instance.addPlayer(m.getInt(0), m.getString(1));
                    break;
                case "NameChange":
                    // A user changed their name
                    GameData.instance.getPlayer(m.getInt(0)).name = m.getString(1);
                    Signal.instance.dispatchEvent(new GameEvent(GameEvent.USER_CHANGED));
                    break;
                case "Chat":
                    Console.instance.log(m, LogType.CHAT);
                    break;
                case "CreateGameState":
                    Net.connection.send("NewGameState", GameData.instance.createGameState());
                    break;
                case "SetGameState":
                    GameData.instance.setGameState(m.getString(0));
                    break;
                case "GetGameState":
                    Net.connection.send("NewGameState", GameData.instance.getGameState());
                    break;
                default:
                    trace(m.toString());
                    break;
            }
        }

        private function handleError(error:PlayerIOError):void
        {
            handleDisconnect();
            var p:InfoPopup = new InfoPopup();
            p.text = JSON.stringify(error.message);
            PopupManager.open(p);
        }

        private function openPopup(panel:Popup):void
        {
            // Close existing popups
            while (groupPopups.numElements > 0)
                Popup(groupPopups.getElementAt(0)).close();

            groupPopups.addElement(panel);
        }

        private function closePopup():void
        {
            // Close all existing popups
            // Expect only one popup at a time since popups are designed to be modal only
            popupModalRectangle.visible = false;
            while (groupPopups.numElements > 0)
                Popup(groupPopups.getElementAt(0)).close();
        }

        private function onPopupAddedOrRemoved(event:ElementExistenceEvent):void
        {
            callLater(function ():void
            {
                popupModalRectangle.includeInLayout = popupModalRectangle.visible = groupPopups.numElements > 0;
            });
        }

        private function onButtonConsole(event:MouseEvent):void
        {
            var p:ConsolePopup = new ConsolePopup();
            PopupManager.open(p);
        }

        private function onButtonToggleConnection(event:MouseEvent):void
        {
            if (Net.connection && Net.connection.connected)
            {
                Net.connection.disconnect();
                handleDisconnect(false);
            } else
            {
                openConnectionTypePopup();
            }
        }

        private function openConnectionTypePopup():void
        {
            var p:ConfirmPopup = new ConfirmPopup();
            p.header = "Connect to Server";
            p.description = "Select a server to connect to.\nRelease: Live world\nDevelopment: Local (debug only)";
            p.textConfirm = "Release";
            p.textCancel = "Development";
            p.callbackConfirm = useReleaseServer;
            p.callbackCancel = useDevelopmentServer;
            PopupManager.open(p);

            function useDevelopmentServer():void
            {
                Net.client.multiplayer.developmentServer = "127.0.0.1:8184";
                joinRoom();
            }

            function useReleaseServer():void
            {
                Net.client.multiplayer.developmentServer = null;
                joinRoom();
            }
        }

        private function onButtonChangeName(event:MouseEvent):void
        {
            var p:InputPopup = new InputPopup();
            p.header = "Name Change";
            p.description = "Enter the name you want to be called by.";
            p.callbackConfirm = requestNameChange;
            p.textPrompt = "New Name";
            PopupManager.open(p);
        }

        private function requestNameChange(str:String):void
        {
            Net.connection.send("NameChange", str);
        }
        ]]></fx:Script>

    <s:Group id="groupScreens"
             width="100%"
             height="100%">
    </s:Group>


    <s:VGroup width="100%"
              height="100%"
              horizontalAlign="center"
              padding="10">

        <s:Panel width="100%">
            <s:VGroup width="100%">
                <s:HGroup width="100%"
                          verticalAlign="middle">
                    <s:Label text="Chaos Arena"/>
                    <s:Spacer width="100%"/>
                    <s:Label id="labelConnection"/>
                    <s:Button id="buttonToggleConnection"
                              label="Connect"
                              click="onButtonToggleConnection(event)"/>
                    <s:Button label="Console"
                              icon="{Icons.Settings}"
                              click="onButtonConsole(event)"/>
                </s:HGroup>
                <s:HGroup width="100%">
                    <s:Spacer width="100%"/>
                    <s:Button label="Change Name"
                              click="onButtonChangeName(event)"/>
                </s:HGroup>
            </s:VGroup>
        </s:Panel>

        <g:GameStage width="100%"
                     height="100%"/>

    </s:VGroup>

    <!--Modal mode rectangle for popups-->
    <s:VGroup id="popupModalRectangle"
              width="100%"
              height="100%"
              visible="false"
              includeInLayout="false">
        <s:Rect width="100%"
                height="100%">
            <s:fill>
                <s:SolidColor color="{Color.black}"
                              alpha=".4"/>
            </s:fill>
        </s:Rect>
    </s:VGroup>

    <!--Popup layer-->
    <s:VGroup id="groupPopups"
              elementAdd="onPopupAddedOrRemoved(event)"
              elementRemove="onPopupAddedOrRemoved(event)"
              width="100%"
              height="100%"
              padding="50"
              horizontalAlign="center"
              verticalAlign="middle"/>
</s:Application>
