<?xml version="1.0"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009"
               xmlns:s="library://ns.adobe.com/flex/spark"
               creationComplete="onCreationComplete(event)">

    <fx:Style source="/assets/css/global.css"/>

    <fx:Script><![CDATA[
        import events.PopupEvent;

        import global.Color;
        import global.Icons;

        import logic.PopupManager;

        import logic.Signal;

        import mx.collections.ArrayCollection;

        import mx.events.FlexEvent;

        import playerio.*;

        import spark.events.ElementExistenceEvent;

        import ui.popups.InfoPopup;

        import ui.popups.Popup;

        private function onCreationComplete(event:FlexEvent):void
        {
            listConsole.dataProvider = new ArrayCollection();

            addEventListeners();
        }

        private function addEventListeners():void
        {
            Signal.instance.addEventListener(PopupEvent.OPEN, function (event:PopupEvent):void
            {
                openPopup(event.popup);
            });

            Signal.instance.addEventListener(PopupEvent.CLOSE, function (event:PopupEvent):void
            {
                closePopup();
            });

            startMultiplayer();
        }

        private function startMultiplayer():void
        {
            var serverId:String = "generations-lrcaoga3v0fyoyea42pza";

            //This connects us to our game server

            PlayerIO.connect(stage, serverId, "public", "GuestUser", "", null, handleConnect, handleError);

            // Called on successful connection
            function handleConnect(client:Client)
            {
                trace("Connected to server");

                //Connect to the local development server instead of Player.IO servers.
                client.multiplayer.developmentServer = "127.0.0.1:8184";

                //Makes us join or create the room "test"
                client.multiplayer.createJoinRoom("", // Room id. If set to null a random roomid is used
                        "Game", // The game type started on the server
                        true, // Should the room be visible in the lobby?
                        {}, // Room data. This data is returned to lobby list. Variabels can be modifed on the server
                        {}, // User join data
                        handleJoin, // Function executed on successful joining of the room
                        handleError // Function executed if we got a join error
                );
            }

            function handleJoin(connection:Connection):void
            {
                //Send "Hello" to the server
                connection.send("Hello World");

                //Listen for the "hello world" message and trace out when it arrives
                connection.addMessageHandler("*", handleMessages);
            }

            function handleMessages(m:Message):void
            {
                switch (m.type)
                {
                    default:
                        log(JSON.stringify(m));
                        break;
                }
            }

            function handleError(error:PlayerIOError)
            {
                trace(JSON.stringify(error));
            }
        }

        private function log(str:String):void
        {
            listConsole.dataProvider.addItem(str);
        }


        private function openPopup(panel:Popup):void
        {
            // Close existing popups
            while (groupPopups.numElements > 0)
                Popup(groupPopups.getElementAt(0)).close();

            groupPopups.addElement(panel);
        }

        private function closePopup():void
        {
            // Close all existing popups
            // Expect only one popup at a time since popups are designed to be modal only
            popupModalRectangle.visible = false;
            while (groupPopups.numElements > 0)
                Popup(groupPopups.getElementAt(0)).close();
        }

        private function onPopupAddedOrRemoved(event:ElementExistenceEvent):void
        {
            callLater(function ():void
            {
                popupModalRectangle.includeInLayout = popupModalRectangle.visible = groupPopups.numElements > 0;
            });
        }

        private function onButtonClickHelloWorld(event:MouseEvent):void
        {
            var p:InfoPopup = new InfoPopup();
            p.text = "Hello!";
            PopupManager.open(p);
        }
        ]]></fx:Script>

    <s:Group id="groupScreens"
             width="100%"
             height="100%">
    </s:Group>


    <s:VGroup width="100%"
              height="100%"
              horizontalAlign="center"
              verticalAlign="middle"
              padding="10">

        <!--        <s:Button label="Hello World"-->
        <!--                  icon="{Icons.Settings}"-->
        <!--                  click="onButtonClickHelloWorld(event)"/>-->
        <!--        <s:Button label="Hello World Disabled"-->
        <!--                  icon="{Icons.Settings}"-->
        <!--                  enabled="false"/>-->
        <!--        <s:Label text="Hello World"/>-->
        <!--        <s:TextInput skinClass="skins.TextInputSkin"-->
        <!--                     width="100"-->
        <!--                     prompt="test"/>-->
        <!--        <s:Spacer height="10"/>-->

        <s:Panel width="100%">
            <s:VGroup width="100%">
                <s:Label width="100%"
                         text="Connection"/>
                <s:List id="listConsole"
                        width="100%"
                        height="100%"/>
            </s:VGroup>
        </s:Panel>

    </s:VGroup>

    <!--Modal mode rectangle for popups-->
    <s:VGroup id="popupModalRectangle"
              width="100%"
              height="100%"
              visible="false"
              includeInLayout="false">
        <s:Rect width="100%"
                height="100%">
            <s:fill>
                <s:SolidColor color="{Color.black}"
                              alpha=".4"/>
            </s:fill>
        </s:Rect>
    </s:VGroup>

    <!--Popup layer-->
    <s:VGroup id="groupPopups"
              elementAdd="onPopupAddedOrRemoved(event)"
              elementRemove="onPopupAddedOrRemoved(event)"
              width="100%"
              height="100%"
              padding="50"
              horizontalAlign="center"
              verticalAlign="middle"/>
</s:Application>
