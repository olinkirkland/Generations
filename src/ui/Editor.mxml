<?xml version="1.0"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
         xmlns:s="library://ns.adobe.com/flex/spark"
         xmlns:ui="ui.*"
         width="100%"
         height="100%">

    <fx:Script><![CDATA[
        import flash.filters.BitmapFilterQuality;

        import global.Color;
        import global.Icons;

        import mx.collections.ArrayCollection;

        import spark.events.ElementExistenceEvent;

        import ui.popups.ConfirmPopup;

        import ui.popups.Popup;

        import ui.renderers.RNBundleItemRenderer;

        public static var EXIT:String = "exit";

        private var directory:File;
        private var packages:ArrayCollection;
        private var metas:ArrayCollection;
        private var p:RNPackage;

        public function load(directory:File):void
        {
            this.directory = directory;

            visible = false;

            /**
             * Load
             */

            var files:Object = {};
            var directoryListing:Array = directory.getDirectoryListing();
            for each (var file:File in directoryListing)
            {
                if (file.isDirectory || file.extension != "json")
                    continue;

                files[file.nativePath] = {
                    file:     file,
                    isLoaded: false
                };

                file.addEventListener(Event.COMPLETE, onFileLoaded);
                file.load();
            }

            function onFileLoaded(event:Event):void
            {
                /**
                 * Single file loaded
                 */
                var f:File = event.target as File;
                f.removeEventListener(Event.COMPLETE, onFileLoaded);
                files[f.nativePath].isLoaded = true;

                // Are all files loaded?
                for each (var o:Object in files)
                    if (!o.isLoaded)
                        return;

                /**
                 * All files loaded
                 */
                var rawPackages:Array = [];
                for each (o in files)
                {
                    var bytes:ByteArray = o.file.data;
                    var json:String = bytes.readUTFBytes(bytes.length);

                    if (o.file.name != "dynamic_bundles.json")
                    {
                        rawPackages.push(json);
                    }
                    else
                    {
                        // Parse metadata
                        metas = new ArrayCollection();
                        for each (var m:Object in JSON.parse(json) as Array)
                            metas.addItem(PackageFactory.objToRNMeta(m));
                    }
                }

                parseData(rawPackages);
            }
        }

        public function parseData(rawPackages:Array):void
        {
            packages = new ArrayCollection();
            for each (var json:String in rawPackages)
                packages.addItem(PackageFactory.jsonToPackage(json));

            listPackages.dataProvider = packages;

            validateView();

            // Add event listeners
            listBundles.addEventListener(RNBundleItemRenderer.BUNDLE_REMOVED, onRemoved);
            listBundles.addEventListener(RNBundleItemRenderer.BUNDLE_CLONED, onCloned);
            listBundles.addEventListener(RNBundleItemRenderer.BUNDLE_CHANGED, onChanged);

            visible = true;
        }

        private function onClickSave(event:MouseEvent):void
        {
            save();
        }

        private function save():void
        {
            validateModel();

            if (!directory)
            {
                saveAs();
                return;
            }

            var stream:FileStream = new FileStream();
            stream.open(directory, FileMode.WRITE);
            stream.writeUTFBytes(JSON.stringify(p.toObject(), null, "  "));
            stream.close();

            validateView();
        }

        public function onClickSaveAs(event:MouseEvent):void
        {
            saveAs();
        }

        private function onClickSaveAll(event:MouseEvent):void
        {
            // todo save all packages
        }

        private function onClickEditSchedule(event:MouseEvent):void
        {
            var popup:SchedulePopup = new SchedulePopup();
            popup.metas = metas;
            openPopup(popup);
        }

        private function saveAs():void
        {
            var f:File = new File();
            f.addEventListener(Event.SELECT, onSaveAsComplete)
            f.browseForSave("Save As");
        }

        private function onSaveAsComplete(event:Event):void
        {
            directory = event.target as File;
            Local.lastOpenedPath = directory.nativePath;

            save();

            validateView();
        }

        private function onClickOpenDirectory(event:MouseEvent):void
        {
            navigateToURL(new URLRequest(directory.nativePath));
        }


        private function onClickOpenPackageFile(event:MouseEvent):void
        {
            // todo
            navigateToURL(new URLRequest(directory.nativePath));
        }

        private function onClickClose(event:MouseEvent):void
        {
            var popup:ConfirmPopup = new ConfirmPopup();
            popup.header = "Exit without Saving";
            popup.description = "Are you sure you want to exit without saving? Unsaved changes will be discarded.";
            popup.onConfirm = exitWithoutSaving;
            openPopup(popup);
        }

        private function exitWithoutSaving():void
        {
            dispatchEvent(new Event(EXIT));
        }

        private function validateView():void
        {
            buttonExploreDirectory.label = directory.nativePath;

//            buttonExplore.setStyle("icon", directory != null ? Icons.folder : Icons.folderBlocked);
//            buttonExplore.enabled = directory != null;
//
//            inputPackageName.text = pack.name;
//            inputImage.text = pack.image;
//            inputSlogan.text = pack.slogan;
//            inputGameWorld.text = pack.gameWorld;
//            inputOfferDuration.text = pack.offerDuration;
//
//            listBundles.dataProvider = new ArrayCollection();
//            for each (var bundle:RNBundle in pack.bundles)
//                listBundles.dataProvider.addItem(bundle);
        }

        private function onRemoved(event:Event):void
        {
            var renderer:RNBundleItemRenderer = event.target as RNBundleItemRenderer;
            for (var i:int = 0; i < p.bundles.length; i++)
                if (p.bundles[i] == renderer.bundle)
                    p.bundles.removeItem(renderer.bundle);
        }

        private function onCloned(event:Event):void
        {
            var renderer:RNBundleItemRenderer = event.target as RNBundleItemRenderer;
            for (var i:int = 0; i < p.bundles.length; i++)
                if (p.bundles[i] == renderer.bundle)
                    p.bundles.addItemAt(PackageFactory.objToRNBundle(renderer.bundle.toObject()), i + 1);
        }

        private function onChanged(event:Event):void
        {
            // todo Unsaved packages should show a * on the Save button's label to indicate they are unsaved

            validateView();
        }

        private function validateModel():void
        {
            p.name = inputPackageName.text;
            p.image = inputImage.text;
            p.slogan = inputSlogan.text;
        }

        private function onClickAddBundle(event:MouseEvent):void
        {
            p.bundles.addItem(new RNBundle());
            validateView();
        }

        private function openPopup(panel:Popup):void
        {
            // Close existing popups
            while (popups.numElements > 0)
                Popup(popups.getElementAt(0)).close();

            popups.addElement(panel);
        }

        private function onPopupAddedOrRemoved(event:ElementExistenceEvent):void
        {
            callLater(function ():void
            {
                popupModalRectangle.includeInLayout = popupModalRectangle.visible = popups.numElements > 0;
            });
        }
        ]]></fx:Script>

    <s:VGroup width="100%"
              height="100%"
              padding="10">

        <s:HGroup width="100%"
                  verticalAlign="middle">
            <!--Package Group (CDN Directory) Top Bar-->
            <s:Button id="buttonExploreDirectory"
                      icon="{Icons.folder}"
                      label="..."
                      click="onClickOpenDirectory(event)" />

            <s:Button id="buttonSaveAll"
                      icon="{Icons.save}"
                      label="Save"
                      click="onClickSaveAll(event)" />

            <s:Button id="buttonEditSchedule"
                      icon="{Icons.schedule}"
                      label="Edit Schedule"
                      click="onClickEditSchedule(event)" />

            <s:Spacer width="100%" />

            <s:Button id="buttonClose"
                      label="Exit without Saving"
                      icon="{Icons.close}"
                      click="onClickClose(event)" />
        </s:HGroup>

        <s:Panel width="100%"
                 height="100%">

            <s:HGroup width="100%"
                      height="100%"
                      gap="10">

                <!--Package Group Side Bar-->
                <s:Panel skinClass="skins.PanelSkinWithShadow"
                         width="260"
                         height="100%">

                    <s:VGroup width="100%"
                              height="100%">

                        <!--Packages-->
                        <s:Label text="Packages" />
                        <s:Label text="Select a package from the list below to edit it."
                                 width="100%" />
                        <s:List id="listPackages"
                                width="100%"
                                height="100%"
                                itemRenderer="ui.renderers.RNPackageItemRenderer"
                                contentBackgroundAlpha="0"
                                borderVisible="false"
                                useVirtualLayout="false"
                                horizontalScrollPolicy="off"
                                verticalScrollPolicy="auto" />
                    </s:VGroup>
                </s:Panel>

                <s:Panel width="100%"
                         height="100%"
                         skinClass="skins.PanelSkinWithShadow">

                    <!--Package-->
                    <s:VGroup width="100%"
                              height="100%">

                        <!--Bundle Menu-->
                        <s:HGroup width="100%">
                            <s:Button id="buttonSave"
                                      label="Save"
                                      icon="{Icons.save}"
                                      click="onClickSave(event)" />
                            <s:Button id="buttonExplore"
                                      icon="{Icons.add}"
                                      click="onClickOpenPackageFile(event)" />
                            <s:Spacer width="100%" />
                        </s:HGroup>

                        <!--Bundle-->
                        <s:Scroller width="100%"
                                    height="100%">

                            <s:VGroup width="100%">
                                <ui:TextInputWithIcon id="inputPackageName"
                                                      prompt="Name"
                                                      width="100%" />
                                <ui:TextInputWithIcon id="inputImage"
                                                      prompt="Image"
                                                      width="100%" />
                                <ui:TextInputWithIcon id="inputSlogan"
                                                      prompt="Slogan"
                                                      width="100%" />
                                <ui:TextInputWithIcon id="inputGameWorld"
                                                      prompt="Game World"
                                                      width="100%" />
                                <ui:TextInputWithIcon id="inputOfferDuration"
                                                      prompt="Offer Duration"
                                                      width="100%" />

                                <s:HGroup width="100%"
                                          padding="15">
                                    <s:Button id="buttonAddBundle"
                                              icon="{Icons.add}"
                                              label="Add Bundle"
                                              click="onClickAddBundle(event)" />
                                </s:HGroup>

                                <s:List id="listBundles"
                                        width="100%"
                                        height="100%"
                                        itemRenderer="ui.renderers.RNBundleItemRenderer"
                                        contentBackgroundAlpha="0"
                                        borderVisible="false"
                                        useVirtualLayout="false"
                                        horizontalScrollPolicy="off"
                                        verticalScrollPolicy="off">
                                    <s:layout>
                                        <s:HorizontalLayout />
                                    </s:layout>
                                </s:List>
                            </s:VGroup>

                        </s:Scroller>

                    </s:VGroup>

                </s:Panel>

            </s:HGroup>
        </s:Panel>
    </s:VGroup>

    <!--Modal mode rectangle for popups-->
    <s:VGroup id="popupModalRectangle"
              width="100%"
              height="100%"
              visible="false"
              includeInLayout="false">
        <s:Rect width="100%"
                height="100%">
            <s:fill>
                <s:SolidColor color="{Color.black}"
                              alpha=".4" />
            </s:fill>
        </s:Rect>
    </s:VGroup>

    <!--Popup layer-->
    <s:VGroup id="popups"
              elementAdd="onPopupAddedOrRemoved(event)"
              elementRemove="onPopupAddedOrRemoved(event)"
              width="100%"
              height="100%"
              padding="50"
              horizontalAlign="center"
              verticalAlign="middle" />
</s:Group>